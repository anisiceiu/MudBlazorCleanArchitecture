@page "/categories"
@attribute [Authorize(Roles = "Admin")]
@using System.Net.Http.Json
@using Application.DTOs
@using Application.Services
@using Microsoft.AspNetCore.Authorization
@inject CategoryService categoryService

<PageTitle>Home</PageTitle>
<MudContainer>
<MudPaper>
        <MudButton Href="/categories/add" Variant="Variant.Filled" Color="Color.Primary">Add Category</MudButton>

<MudDataGrid T="CategoryDto"  Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Category List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
       @*  <SelectColumn T="CategoryDto" /> *@
        <PropertyColumn Property="x => x.CategoryId" Title="Nr" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.CategoryName" Title="Category Name" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Description" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CategoryDto" />
    </PagerContent>
</MudDataGrid>

</MudPaper>

</MudContainer>
@code {
    private IEnumerable<CategoryDto> Elements = new List<CategoryDto>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<CategoryDto, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.CategoryName.Length;
        else
            return x.CategoryName;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<CategoryDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.CategoryName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.CategoryName} {x.Description}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await categoryService.GetAllCategoriesAsync();
    }

    
}